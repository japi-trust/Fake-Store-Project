{"ast":null,"code":"export const login = (username, password) => {\n  var _JSON$parse, _auth$username, _auth$username2;\n\n  const auth = (_JSON$parse = JSON.parse(localStorage.getItem(\"auth\"))) !== null && _JSON$parse !== void 0 ? _JSON$parse : {}; // Passwords should never be stored in plain text as is done in the code below.\n  // This code serves as just a demonstration and is not intended as an example\n  // of production ready code.\n\n  console.log(((_auth$username = auth[username]) === null || _auth$username === void 0 ? void 0 : _auth$username.password) === password);\n  return ((_auth$username2 = auth[username]) === null || _auth$username2 === void 0 ? void 0 : _auth$username2.password) === password;\n};\nexport const createUser = (username, password) => {\n  var _JSON$parse2;\n\n  const auth = (_JSON$parse2 = JSON.parse(localStorage.getItem(\"auth\"))) !== null && _JSON$parse2 !== void 0 ? _JSON$parse2 : {};\n\n  if (auth[username]) {\n    console.log(auth[username]); // throw new Error(`User ${username} already exists.`);\n\n    alert(`User ${username} already exists.`);\n  } else {\n    console.log(auth[username]); // Passwords should never be stored in plain text as is done in the code below.\n    // This code serves as just a demonstration and is not intended as an example\n    // of production ready code.\n\n    auth[username] = {\n      password: password\n    };\n    localStorage.setItem(\"auth\", JSON.stringify(auth));\n  }\n};","map":{"version":3,"sources":["/Users/medhanitgebretsadik/Desktop/Fake Store Final-Project-main/src/Components/Utils/auth.js"],"names":["login","username","password","auth","JSON","parse","localStorage","getItem","console","log","createUser","alert","setItem","stringify"],"mappings":"AAAA,OAAO,MAAMA,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAAA;;AAC5C,QAAMC,IAAI,kBAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAH,qDAA+C,EAAzD,CAD4C,CAE5C;AACA;AACA;;AACGC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAAN,IAAI,CAACF,QAAD,CAAJ,kEAAgBC,QAAhB,MAA6BA,QAAzC;AACH,SAAO,oBAAAC,IAAI,CAACF,QAAD,CAAJ,oEAAgBC,QAAhB,MAA6BA,QAApC;AACA,CAPM;AASP,OAAO,MAAMQ,UAAU,GAAG,CAACT,QAAD,EAAWC,QAAX,KAAwB;AAAA;;AACjD,QAAMC,IAAI,mBAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAH,uDAA+C,EAAzD;;AAEG,MAAIJ,IAAI,CAACF,QAAD,CAAR,EAAoB;AAChBO,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACF,QAAD,CAAhB,EADgB,CAEtB;;AACAU,IAAAA,KAAK,CAAE,QAAOV,QAAS,kBAAlB,CAAL;AACG,GAJD,MAIO;AACHO,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACF,QAAD,CAAhB,EADG,CAET;AACA;AACA;;AACAE,IAAAA,IAAI,CAACF,QAAD,CAAJ,GAAiB;AAAEC,MAAAA,QAAQ,EAAEA;AAAZ,KAAjB;AACAI,IAAAA,YAAY,CAACM,OAAb,CAAqB,MAArB,EAA6BR,IAAI,CAACS,SAAL,CAAeV,IAAf,CAA7B;AACA;AACD,CAfM","sourcesContent":["export const login = (username, password) => {\n\tconst auth = JSON.parse(localStorage.getItem(\"auth\")) ?? {};\n\t// Passwords should never be stored in plain text as is done in the code below.\n\t// This code serves as just a demonstration and is not intended as an example\n\t// of production ready code.\n    console.log(auth[username]?.password === password);\n\treturn auth[username]?.password === password;\n};\n\nexport const createUser = (username, password) => {\n\tconst auth = JSON.parse(localStorage.getItem(\"auth\")) ?? {};\n\n    if (auth[username]) {\n        console.log(auth[username]);\n\t\t// throw new Error(`User ${username} already exists.`);\n\t\talert(`User ${username} already exists.`);\n    } else {\n        console.log(auth[username]);\n\t\t// Passwords should never be stored in plain text as is done in the code below.\n\t\t// This code serves as just a demonstration and is not intended as an example\n\t\t// of production ready code.\n\t\tauth[username] = { password: password };\n\t\tlocalStorage.setItem(\"auth\", JSON.stringify(auth));\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}